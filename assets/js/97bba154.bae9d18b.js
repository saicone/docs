"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[270],{1655:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"rtag/feature/compatible","title":"Compatible APIs","description":"List of compatible APIs that can be used with Rtag","source":"@site/docs/rtag/feature/compatible.md","sourceDirName":"rtag/feature","slug":"/rtag/feature/compatible","permalink":"/rtag/feature/compatible","draft":false,"unlisted":false,"editUrl":"https://github.com/saicone/rtag/blob/main/docs/default/feature/compatible.md","tags":[],"version":"current","lastUpdatedBy":"Rub\xe9n","lastUpdatedAt":1751601617000,"sidebarPosition":7,"frontMatter":{"sidebar_position":7,"title":"Compatible APIs","description":"List of compatible APIs that can be used with Rtag"},"sidebar":"rtag","previous":{"title":"Chat Component","permalink":"/rtag/feature/chat-component"},"next":{"title":"Guides","permalink":"/rtag/guides/"}}');var i=n(4848),s=n(8453);const o={sidebar_position:7,title:"Compatible APIs",description:"List of compatible APIs that can be used with Rtag"},r=void 0,l={},c=[{value:"Bukkit PersistentDataContainer",id:"bukkit-persistentdatacontainer",level:2},{value:"Example",id:"example",level:3},{value:"NBT Injector from Item-NBT-API",id:"nbt-injector-from-item-nbt-api",level:2},{value:"Example",id:"example-1",level:3}];function d(t){const e={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:"There are some compatible APIs that Rtag can interact with."}),"\n",(0,i.jsx)(e.h2,{id:"bukkit-persistentdatacontainer",children:"Bukkit PersistentDataContainer"}),"\n",(0,i.jsxs)(e.p,{children:["The ",(0,i.jsx)(e.code,{children:"PersistentDataContainer"})," API was introduced in Bukkit 1.14 to save custom tags at different objects like items, entities and tile entities, making NBT tag editor easier for most developers, basically the same utility as Rtag but limited to custom tags, only with ",(0,i.jsx)(e.a,{href:"/rtag/intro#compatible-objects",children:"compatible objects"})," and plugin instance usage, so you need to understand NBT tags to make something functional."]}),"\n",(0,i.jsxs)(e.p,{children:["With Rtag it's possible to edit objects from ",(0,i.jsx)(e.code,{children:"PersistentDataContainer"})," because are saved in tag paths:"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Items and tile entities: ",(0,i.jsx)(e.code,{children:"PublicBukkitValues -> <plugin>:<key>"}),"."]}),"\n",(0,i.jsxs)(e.li,{children:["Entities: ",(0,i.jsx)(e.code,{children:"BukkitValues -> <plugin>:<key>"}),"."]}),"\n",(0,i.jsxs)(e.li,{children:["Chunks: ",(0,i.jsx)(e.code,{children:"ChunkBukkitValues -> <plugin>:<key>"}),"."]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"example",children:"Example"}),"\n",(0,i.jsxs)(e.p,{children:['For example, if a plugin named "CoolPlugin" save a ',(0,i.jsx)(e.code,{children:"String"}),' value into "asd" key using ',(0,i.jsx)(e.code,{children:"PersistentDataContainer"})," API, you can edit it by using the following method."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'// Using item\nRtagItem tag = new RtagItem(item);\n// Using block\nRtagBlock tag = new RtagBlock(block);\n\n// Get\nString value = tag.get("PublicBukkitValues", "coolplugin:asd");\n// Set\nString str = "Hello";\ntag.get(str, "PublicBukkitValues", "coolplugin:asd");\n\n\n// Using entity\nRtagEntity tag = new RtagEntity(entity);\n\n// Get\nString value = tag.get("BukkitValues", "coolplugin:asd");\n// Set\nString str = "Hello";\ntag.get(str, "BukkitValues", "coolplugin:asd");\n'})}),"\n",(0,i.jsx)(e.h2,{id:"nbt-injector-from-item-nbt-api",children:"NBT Injector from Item-NBT-API"}),"\n",(0,i.jsxs)(e.p,{children:["The NBT injector feature from Item-NBT-API allows to save custom tags to entities and tile entities, same has ",(0,i.jsx)(e.code,{children:"PersistentDataContainer"})," but it's compatible with versions older than Bukkit 1.14."]}),"\n",(0,i.jsxs)(e.p,{children:["With Rtag it's possible to edit those custom tags because are saved at ",(0,i.jsx)(e.code,{children:"__extraData"})," path."]}),"\n",(0,i.jsx)(e.h3,{id:"example-1",children:"Example"}),"\n",(0,i.jsxs)(e.p,{children:["Edits are the same, but all paths start with ",(0,i.jsx)(e.code,{children:"__extraData"}),"."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'// Using entity\nRtagEntity tag = new RtagEntity(entity);\n// Using block\nRtagBlock tag = new RtagBlock(block);\n\nString str = "My String";\n// Set into "my -> saved -> object" path\ntag.set(str, "__extraData", "my", "saved", "object");\n\n// Get from "my <- save <- object"\nString sameStr = tag.get("__extraData", "my", "saved", "object");\n\n// Remove from path\ntag.remove("__extraData", "my", "saved", "object");\n'})})]})}function u(t={}){const{wrapper:e}={...(0,s.R)(),...t.components};return e?(0,i.jsx)(e,{...t,children:(0,i.jsx)(d,{...t})}):d(t)}},8453:(t,e,n)=>{n.d(e,{R:()=>o,x:()=>r});var a=n(6540);const i={},s=a.createContext(i);function o(t){const e=a.useContext(s);return a.useMemo(function(){return"function"==typeof t?t(e):{...e,...t}},[e,t])}function r(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:o(t.components),a.createElement(s.Provider,{value:e},t.children)}}}]);