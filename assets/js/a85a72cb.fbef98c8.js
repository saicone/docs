"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3450],{816:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"settings/README","title":"Settings","description":"Java library to interpret multiple data formats as flexible configuration.","source":"@site/docs/settings/README.md","sourceDirName":"settings","slug":"/settings/","permalink":"/settings/","draft":false,"unlisted":false,"editUrl":"https://github.com/saicone/settings/blob/main/docs/default/README.md","tags":[],"version":"current","lastUpdatedBy":"github-actions[bot]","lastUpdatedAt":1755643093000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Settings","description":"Java library to interpret multiple data formats as flexible configuration."},"sidebar":"settings"}');var s=n(4848),r=n(8453);const o={sidebar_position:1,title:"Settings",description:"Java library to interpret multiple data formats as flexible configuration."},a=void 0,l={},c=[{value:"Introduction",id:"introduction",level:2}];function d(t){const e={a:"a",h2:"h2",li:"li",p:"p",ul:"ul",...(0,r.R)(),...t.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.p,{children:"Settings library handle multiple data formats as configuration in a flexible way:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Node templates and transformation."}),"\n",(0,s.jsx)(e.li,{children:"Node value substitution in non-compatible formats (like json and yaml)."}),"\n",(0,s.jsx)(e.li,{children:"Fallback format reader."}),"\n",(0,s.jsx)(e.li,{children:"Iterable nodes."}),"\n",(0,s.jsx)(e.li,{children:"Data update parameters."}),"\n",(0,s.jsx)(e.li,{children:"Comparable paths to get nodes."}),"\n",(0,s.jsx)(e.li,{children:"Multi-layer node values."}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"Currently supporting the formats:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://github.com/lightbend/config/blob/main/HOCON.md",children:"HOCON"})}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"https://www.json.org/",children:"JSON"})," (with ",(0,s.jsx)(e.a,{href:"https://github.com/google/gson",children:"Gson"}),")"]}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://toml.io/en/v1.0.0",children:"TOML"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"http://yaml.org/spec/1.1/current.html",children:"YAML"})}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"Take in count this library is not focused as an object serializer, the main purpose is making flexible interactions with multiple data formats at the same time."}),"\n",(0,s.jsx)(e.p,{children:"It also has simple methods to get nodes as multiple data types if you want to implement your own object serializer."}),"\n",(0,s.jsx)(e.h2,{id:"introduction",children:"Introduction"})]})}function u(t={}){const{wrapper:e}={...(0,r.R)(),...t.components};return e?(0,s.jsx)(e,{...t,children:(0,s.jsx)(d,{...t})}):d(t)}},8453:(t,e,n)=>{n.d(e,{R:()=>o,x:()=>a});var i=n(6540);const s={},r=i.createContext(s);function o(t){const e=i.useContext(r);return i.useMemo(function(){return"function"==typeof t?t(e):{...e,...t}},[e,t])}function a(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(s):t.components||s:o(t.components),i.createElement(r.Provider,{value:e},t.children)}}}]);