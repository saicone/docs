"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[545],{6054:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>r});const a=JSON.parse('{"id":"rtag/usage/block","title":"RtagBlock","description":"Edit block NBT","source":"@site/docs/rtag/usage/block.md","sourceDirName":"rtag/usage","slug":"/rtag/usage/block","permalink":"/rtag/usage/block","draft":false,"unlisted":false,"editUrl":"https://github.com/saicone/rtag/blob/main/docs/default/usage/block.md","tags":[],"version":"current","lastUpdatedBy":"Rub\xe9n","lastUpdatedAt":1751601617000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"RtagBlock","description":"Edit block NBT"},"sidebar":"rtag","previous":{"title":"RtagEntity","permalink":"/rtag/usage/entity"},"next":{"title":"Advanced","permalink":"/rtag/advanced/"}}');var o=n(4848),s=n(8453);const i={sidebar_position:4,title:"RtagBlock",description:"Edit block NBT"},c=void 0,l={},r=[{value:"Create",id:"create",level:2},{value:"Instance",id:"instance",level:3},{value:"Method",id:"method",level:3},{value:"Function",id:"function",level:3},{value:"Edit",id:"edit",level:2},{value:"Function",id:"function-1",level:3},{value:"Instance methods",id:"instance-methods",level:3}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.admonition,{title:"Before continue",type:"info",children:[(0,o.jsxs)(t.p,{children:["To understand this page you should see ",(0,o.jsx)(t.a,{href:"/rtag/usage/editor",children:"RtagEditor guide"}),"."]}),(0,o.jsxs)(t.p,{children:["For better understand about some tile entity tags it's suggested to visit the ",(0,o.jsx)(t.a,{href:"https://minecraft.wiki/w/Chunk_format#Block_entity_format",children:"Minecraft wiki page"}),"."]})]}),"\n",(0,o.jsx)(t.admonition,{title:"Current limitations",type:"caution",children:(0,o.jsxs)(t.p,{children:["For now RtagBlock only can be used to edit tile entities tags, so ",(0,o.jsx)(t.strong,{children:"it's planned"})," to use Chunk PersistentDataContainer (added on Bukkit 1.16) to save any block tag."]})}),"\n",(0,o.jsxs)(t.admonition,{title:"Looking for non-vanilla tags?",type:"tip",children:[(0,o.jsxs)(t.p,{children:["If you want to add non-vanilla tags to tile entities, take a look hover ",(0,o.jsx)(t.a,{href:"/rtag/feature/compatible",children:"compatible APIs"})," section."]}),(0,o.jsx)(t.p,{children:'For now Rtag does not offer a "safe way" to save non-vanilla tags in old Bukkit versions.'})]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"RtagBlock"})," is an instance of ",(0,o.jsx)(t.code,{children:"RtagEditor"}),", so uses the same methods to edit, load and update changes as editor."]}),"\n",(0,o.jsx)(t.h2,{id:"create",children:"Create"}),"\n",(0,o.jsxs)(t.p,{children:["There are multiple ways to create a ",(0,o.jsx)(t.code,{children:"RtagBlock"})," instance."]}),"\n",(0,o.jsx)(t.h3,{id:"instance",children:"Instance"}),"\n",(0,o.jsxs)(t.p,{children:["Using the simple constructor that accept any ",(0,o.jsx)(t.code,{children:"Block"}),"."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:"Block block = ...;\n\nRtagBlock tag = new RtagBlock(block);\n"})}),"\n",(0,o.jsx)(t.p,{children:"Or specify the Rtag instance to handle NBT."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:"Block block = ...;\nRtag rtag = ...;\n\nRtagBlock tag = new RtagBlock(rtag, block);\n"})}),"\n",(0,o.jsx)(t.h3,{id:"method",children:"Method"}),"\n",(0,o.jsxs)(t.p,{children:["Using the simple method that accept any ",(0,o.jsx)(t.code,{children:"Block"}),"."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:"Block block = ...;\n\nRtagBlock tag = RtagBlock.of(block);\n"})}),"\n",(0,o.jsx)(t.p,{children:"Or specify the Rtag instance to handle NBT."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:"Block block = ...;\nRtag rtag = ...;\n\nRtagBlock tag = RtagBlock.of(rtag, block);\n"})}),"\n",(0,o.jsx)(t.h3,{id:"function",children:"Function"}),"\n",(0,o.jsxs)(t.p,{children:["Using functions to edit NBT is the most easy way to handle ",(0,o.jsx)(t.code,{children:"RtagBlock"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["You can edit the provided ",(0,o.jsx)(t.code,{children:"Block"})," without replacing it."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:'Block block = ...;\n\n// Edit block\nRtagBlock.edit(block, tag -> {\n\ttag.set(123, "path");\n});\n\n// Specify Rtag instance\nRtag rtag = ...;\nRtagBlock.edit(rtag, block, tag -> {\n\ttag.set(123, "path");\n});\n'})}),"\n",(0,o.jsxs)(t.p,{children:["Take in count that method return the ",(0,o.jsx)(t.code,{children:"Block"})," itself with changes loaded."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:'Block block = ...;\n\n// Edit block\nBlock sameBlock = RtagBlock.edit(block, tag -> {\n\ttag.set(123, "path");\n});\n\n// Specify Rtag instance\nRtag rtag = ...;\nBlock sameBlock = RtagBlock.edit(rtag, block, tag -> {\n\ttag.set(123, "path");\n});\n'})}),"\n",(0,o.jsx)(t.p,{children:"And you can return any type of object specified on the same function method."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:'Block block = ...;\n\n// Return as you want from RtagEditor instance\nint number = RtagBlock.edit(block, tag -> {\n\treturn tag.get("path");\n});\n'})}),"\n",(0,o.jsx)(t.h2,{id:"edit",children:"Edit"}),"\n",(0,o.jsxs)(t.p,{children:["There is some methods that ",(0,o.jsx)(t.code,{children:"RtagBlock"})," contains and ",(0,o.jsx)(t.code,{children:"RtagEditor"})," don't."]}),"\n",(0,o.jsx)(t.h3,{id:"function-1",children:"Function"}),"\n",(0,o.jsxs)(t.p,{children:["As above functions the current ",(0,o.jsx)(t.code,{children:"RtagBlock"})," can be edited with a function that return the instance itself."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:'RtagBlock tag = ...;\n\ntag.edit(tag -> {\n\ttag.set(123, "path");\n\ttag.set("Hello", "greeting");\n});\n'})}),"\n",(0,o.jsx)(t.h3,{id:"instance-methods",children:"Instance methods"}),"\n",(0,o.jsxs)(t.p,{children:["There are ",(0,o.jsx)(t.strong,{children:"easy to use"})," methods to edit ",(0,o.jsx)(t.strong,{children:"tile entity known tags"})," in a simple way, having a wide Minecraft version support."]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Custom name"}),": Edit tile entity display name (chest for example)."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:'RtagBlock tag = ...;\n\n// Set using String with chat color or chat component json format\ntag.setCustomName("\xa7eColored name");\n\n// Get as chat color format\nString name = tag.getCustomName();\n'})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var a=n(6540);const o={},s=a.createContext(o);function i(e){const t=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);