"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[765],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=s,y=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(y,i(i({ref:t},c),{},{components:n})):r.createElement(y,i({ref:t},c))}));function y(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,i=new Array(a);i[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:s,i[1]=o;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9631:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var r=n(7462),s=(n(7294),n(3905));const a={sidebar_position:3,title:"Messenger",description:"PixelBuy messenger setup."},i=void 0,o={unversionedId:"pixelbuy/setup/messenger",id:"pixelbuy/setup/messenger",title:"Messenger",description:"PixelBuy messenger setup.",source:"@site/docs/pixelbuy/setup/messenger.md",sourceDirName:"pixelbuy/setup",slug:"/pixelbuy/setup/messenger",permalink:"/pixelbuy/setup/messenger",draft:!1,editUrl:"https://github.com/saicone/pixelbuy/blob/main/docs/default/setup/messenger.md",tags:[],version:"current",lastUpdatedBy:"github-actions[bot]",lastUpdatedAt:1739466050,formattedLastUpdatedAt:"Feb 13, 2025",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Messenger",description:"PixelBuy messenger setup."},sidebar:"pixelbuy",previous:{title:"Database",permalink:"/pixelbuy/setup/database"},next:{title:"Usage",permalink:"/pixelbuy/usage/"}},l={},p=[{value:"Sql",id:"sql",level:2},{value:"Redis",id:"redis",level:2},{value:"RabbitMQ",id:"rabbitmq",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,s.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"A messenger hook allows the plugin to synchronize data between hosts that are using the same external database."),(0,s.kt)("p",null,"Not setting a messenger instance may lead to data loss."),(0,s.kt)("p",null,"This concept also uses a main channel to transfer messages, every server with a messenger instance must use the same channel name."),(0,s.kt)("p",null,"PixelBuy currently supports ",(0,s.kt)("inlineCode",{parentName:"p"},"SQL"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"REDIS")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"RABBITMQ")," messenger types, set ",(0,s.kt)("inlineCode",{parentName:"p"},"AUTO")," to let the plugin choose the best available option."),(0,s.kt)("h2",{id:"sql"},"Sql"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"SQL")," messenger type uses the current sql database to transfer messages by adding rows into a separated table, then checks for any unread row (probably added by another plugin instance on a different host)."),(0,s.kt)("p",null,"Every 30 seconds, all rows more than 60 seconds old are automatically deleted by every plugin instance connected at the same ",(0,s.kt)("inlineCode",{parentName:"p"},"SQL")," messenger instance."),(0,s.kt)("h2",{id:"redis"},"Redis"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"REDIS")," messenger type connects to a Redis instance to transfer messages, there's not much to say since it's a highly known system."),(0,s.kt)("h2",{id:"rabbitmq"},"RabbitMQ"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"RABBITMQ"),' messenger type connects to a RabbitMQ instance to transfer temporary messages, instead of Redis this type of messaging is more standardized (and probably better), additionally it requires to set an exchange or "pre-channel" to access messenger channels.'))}d.isMDXComponent=!0}}]);