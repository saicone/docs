"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6309],{1748:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"pixelbuy/setup/messenger","title":"Messenger","description":"PixelBuy messenger setup.","source":"@site/docs/pixelbuy/setup/messenger.md","sourceDirName":"pixelbuy/setup","slug":"/pixelbuy/setup/messenger","permalink":"/pixelbuy/setup/messenger","draft":false,"unlisted":false,"editUrl":"https://github.com/saicone/pixelbuy/blob/main/docs/default/setup/messenger.md","tags":[],"version":"current","lastUpdatedBy":"Rub\xe9n","lastUpdatedAt":1751601617000,"sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Messenger","description":"PixelBuy messenger setup."},"sidebar":"pixelbuy","previous":{"title":"Database","permalink":"/pixelbuy/setup/database"},"next":{"title":"Usage","permalink":"/pixelbuy/usage/"}}');var a=n(4848),r=n(8453);const i={sidebar_position:3,title:"Messenger",description:"PixelBuy messenger setup."},o=void 0,l={},c=[{value:"Sql",id:"sql",level:2},{value:"Redis",id:"redis",level:2},{value:"RabbitMQ",id:"rabbitmq",level:2}];function d(e){const s={code:"code",h2:"h2",p:"p",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.p,{children:"A messenger hook allows the plugin to synchronize data between hosts that are using the same external database."}),"\n",(0,a.jsx)(s.p,{children:"Not setting a messenger instance may lead to data loss."}),"\n",(0,a.jsx)(s.p,{children:"This concept also uses a main channel to transfer messages, every server with a messenger instance must use the same channel name."}),"\n",(0,a.jsxs)(s.p,{children:["PixelBuy currently supports ",(0,a.jsx)(s.code,{children:"SQL"}),", ",(0,a.jsx)(s.code,{children:"REDIS"})," and ",(0,a.jsx)(s.code,{children:"RABBITMQ"})," messenger types, set ",(0,a.jsx)(s.code,{children:"AUTO"})," to let the plugin choose the best available option."]}),"\n",(0,a.jsx)(s.h2,{id:"sql",children:"Sql"}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.code,{children:"SQL"})," messenger type uses the current sql database to transfer messages by adding rows into a separated table, then checks for any unread row (probably added by another plugin instance on a different host)."]}),"\n",(0,a.jsxs)(s.p,{children:["Every 30 seconds, all rows more than 60 seconds old are automatically deleted by every plugin instance connected at the same ",(0,a.jsx)(s.code,{children:"SQL"})," messenger instance."]}),"\n",(0,a.jsx)(s.h2,{id:"redis",children:"Redis"}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.code,{children:"REDIS"})," messenger type connects to a Redis instance to transfer messages, there's not much to say since it's a highly known system."]}),"\n",(0,a.jsx)(s.h2,{id:"rabbitmq",children:"RabbitMQ"}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.code,{children:"RABBITMQ"}),' messenger type connects to a RabbitMQ instance to transfer temporary messages, instead of Redis this type of messaging is more standardized (and probably better), additionally it requires to set an exchange or "pre-channel" to access messenger channels.']})]})}function p(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>o});var t=n(6540);const a={},r=t.createContext(a);function i(e){const s=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);