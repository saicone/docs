"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3557],{4902:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>d,default:()=>g,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"rtag/usage/editor","title":"RtagEditor","description":"Main object to edit NBT easily","source":"@site/docs/rtag/usage/editor.md","sourceDirName":"rtag/usage","slug":"/rtag/usage/editor","permalink":"/rtag/usage/editor","draft":false,"unlisted":false,"editUrl":"https://github.com/saicone/rtag/blob/main/docs/default/usage/editor.md","tags":[],"version":"current","lastUpdatedBy":"github-actions[bot]","lastUpdatedAt":1755643093000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"RtagEditor","description":"Main object to edit NBT easily"},"sidebar":"rtag","previous":{"title":"Usage","permalink":"/rtag/usage/"},"next":{"title":"RtagItem","permalink":"/rtag/usage/item"}}');var i=n(4848),s=n(8453);const o={sidebar_position:1,title:"RtagEditor",description:"Main object to edit NBT easily"},d=void 0,r={},c=[{value:"Edit",id:"edit",level:2},{value:"Simple methods",id:"simple-methods",level:3},{value:"Transformation",id:"transformation",level:3},{value:"Collections",id:"collections",level:3},{value:"Check",id:"check",level:3},{value:"Enums",id:"enums",level:3},{value:"Load",id:"load",level:2},{value:"Save edits",id:"save-edits",level:3},{value:"Update",id:"update",level:2},{value:"Get changes",id:"get-changes",level:3}];function l(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"RtagEditor"})," instances convert a Bukkit object into Minecraft server object and provide an easy way to edit the tag (NBTTagCompound) inside, using a Rtag instance as helper."]}),"\n",(0,i.jsx)(t.h2,{id:"edit",children:"Edit"}),"\n",(0,i.jsxs)(t.p,{children:["To understand ",(0,i.jsx)(t.code,{children:"RtagEditor"})," you first need known how to edit the current tag."]}),"\n",(0,i.jsx)(t.h3,{id:"simple-methods",children:"Simple methods"}),"\n",(0,i.jsx)(t.p,{children:"The editor instance simplify any edit with automatic conversion and providing an tree-like format to set, get and remove objects using paths."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'// Any RtagEditor instance (RtagItem, RtagEntity, RtagBlock)\nRtagEditor tag = ...;\n\nString str = "My String";\n// Set into "my -> saved -> object" path\ntag.set(str, "my", "saved", "object");\n\n// Get from "my <- save <- object"\nString sameStr = tag.get("my", "saved", "object");\n\n// Remove from path\ntag.remove("my", "saved", "object");\n'})}),"\n",(0,i.jsxs)(t.p,{children:["You probably noticed there's not an explicit setter and getter like ",(0,i.jsx)(t.code,{children:"setString"})," or ",(0,i.jsx)(t.code,{children:"getString"}),', that because Rtag do "magic" by convert any NBT object into normal java object.']}),"\n",(0,i.jsxs)(t.p,{children:["Take in count Rtag only return the converted object, it doesn't known if you want a String, Integer, Float... etc, on normal getter operations ",(0,i.jsx)(t.strong,{children:"you should be sure that the object you want is that type of object"})," or the returned object will be null after fail cast or simply it doesn't exist at provided path."]}),"\n",(0,i.jsxs)(t.p,{children:["If you don't known what type of object is it, or the Rtag instance doesn't provide a conversion because the ",(0,i.jsx)(t.a,{href:"/rtag/intro#compatible-objects",children:"compatible objects"})," are limited, you can use an ",(0,i.jsx)(t.a,{href:"/rtag/feature/types",children:"optional type"})," getter that provide a wide variety of conversions and null check for your needs."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'// Any RtagEditor instance (RtagItem, RtagEntity, RtagBlock)\nRtagEditor tag = ...;\n\nString str = "123";\n// Set into "my -> saved -> object" path\ntag.set(str, "my", "saved", "object");\n\n// Cast the object as String (original) or get "456" if doesn\'t exist or cast fails\nString s = tag.getOptional("my", "saved", "object").or("456");\n\n// Same as above, but the optional type try to convert any type of object to String\nString s = tag.getOptional("my", "saved", "object").asString("456");\n\n// So it works to convert as other object type\nint numValue = tag.getOptional("my", "saved", "object").asInt(-1); // -1 as default int\n'})}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsxs)(t.p,{children:["Check out ",(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.a,{href:"/rtag/feature/custom-objects",children:"custom objects guide"})})," if you want to save any type of serializable object."]})}),"\n",(0,i.jsx)(t.h3,{id:"transformation",children:"Transformation"}),"\n",(0,i.jsx)(t.p,{children:"Using transformation methods you can merge and move paths easily."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'// Any RtagEditor instance (RtagItem, RtagEntity, RtagBlock)\nRtagEditor tag = ...;\n\n// Merge values into tag\ntag.merge(Map.of("asd", 123, "someKey", 41), true);\n\n// Move from path to any path\ntag.move(new Object[] {"asd"}, new Object[] {"my", "saved", "object"});\n'})}),"\n",(0,i.jsx)(t.h3,{id:"collections",children:"Collections"}),"\n",(0,i.jsxs)(t.p,{children:["With Rtag is easy to handle list of objects, with ",(0,i.jsx)(t.code,{children:"add"})," method you can add objects to list at provided path, so if the List doesn't exist it will be created."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'// Any RtagEditor instance (RtagItem, RtagEntity, RtagBlock)\nRtagEditor tag = ...;\n\n// Create list at "my -> saved -> list" path\ntag.set(new ArrayList(), "my", "saved", "list");\n\nbyte num = 3;\n// Add into list\ntag.add(num, "my", "saved", "list");\n\n// Get the list\nList<Byte> list = tag.get("my", "saved", "list");\n\n// If you don\'t known what type of list is, you can make a conversion with optional type\nList<Byte> list = tag.getOptional("my", "saved", "list").asList(OptionalType::asByte);\n'})}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsxs)(t.p,{children:["Take in count the NBT lists accept any type of object if the list is empty, because ",(0,i.jsx)(t.strong,{children:"the first object define the NBT list type"}),"."]})}),"\n",(0,i.jsx)(t.h3,{id:"check",children:"Check"}),"\n",(0,i.jsxs)(t.p,{children:["To check if any tag exist or not at defined path, you can use ",(0,i.jsx)(t.code,{children:"hasTag"})," or ",(0,i.jsx)(t.code,{children:"hasNotTag"})," methods."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'// Any RtagEditor instance (RtagItem, RtagEntity, RtagBlock)\nRtagEditor tag = ...;\n\nboolean exist = tag.hasTag("my", "saved", "object");\nboolean notExist = tag.notHasTag("my", "saved", "object");\n'})}),"\n",(0,i.jsx)(t.h3,{id:"enums",children:"Enums"}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsx)(t.p,{children:"This is an advanced feature, you can ignore this because is rarely used."})}),"\n",(0,i.jsx)(t.p,{children:"RtagEditor instances can handle Enums as bit fields, providing an easy way to read and write any type of object with ordinal value."}),"\n",(0,i.jsxs)(t.p,{children:["For example, if ",(0,i.jsx)(t.code,{children:"MyEnum"})," has the values ",(0,i.jsx)(t.code,{children:"FIRE, GLOW, INVISIBLE"})," you can have a ",(0,i.jsx)(t.code,{children:"Set"})," of those enum values in the same field saved as Integer starting with the definition that ",(0,i.jsx)(t.code,{children:"FIRE"})," ordinal is ",(0,i.jsx)(t.code,{children:"0"}),", ",(0,i.jsx)(t.code,{children:"GLOW"})," is ",(0,i.jsx)(t.code,{children:"1"})," and ",(0,i.jsx)(t.code,{children:"INVISIBLE"})," is ",(0,i.jsx)(t.code,{children:"2"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'// Any RtagEditor instance (RtagItem, RtagEntity, RtagBlock)\nRtagEditor tag = ...;\n\n// Add values to enum set at "my -> saved -> enum" path\ntag.addEnum(MyEnum.FIRE, "my", "saved", "enum");\ntag.addEnum(MyEnum.INVISIBLE, "my", "saved", "enum");\n\n// Get enum set of values\nSet<MyEnum> set = tag.getOptional("my", "saved", "enum").asEnumSet(MyEnum.class);\n'})}),"\n",(0,i.jsx)(t.h2,{id:"load",children:"Load"}),"\n",(0,i.jsx)(t.p,{children:"After edit tag is necessary to load changes into Minecraft server object and provided Bukkit object."}),"\n",(0,i.jsx)(t.h3,{id:"save-edits",children:"Save edits"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"load"})," method save the changes (load into)."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'// Any RtagEditor instance (RtagItem, RtagEntity, RtagBlock)\nRtagEditor tag = ...;\n\nString str = "My String";\n// Set into "my -> saved -> object" path\ntag.set(str, "my", "saved", "object");\n\n// Load into provided object\ntag.load();\n'})}),"\n",(0,i.jsx)(t.h2,{id:"update",children:"Update"}),"\n",(0,i.jsxs)(t.p,{children:["If you edit the provided object, is need to update the current tag to continue to use it in the same ",(0,i.jsx)(t.code,{children:"RtagEditor"})," instance."]}),"\n",(0,i.jsx)(t.h3,{id:"get-changes",children:"Get changes"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"// Any RtagEditor instance (RtagItem, RtagEntity, RtagBlock)\nRtagEditor tag = ...;\n\n// <The provided object (item, entity or block) was edited>\n\n// Update current tag\ntag.update();\n"})})]})}function g(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>d});var a=n(6540);const i={},s=a.createContext(i);function o(e){const t=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);