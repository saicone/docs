"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2759],{1548:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"rtag/feature/types","title":"Optional Types","description":"Information about OptionalType and it superclasses","source":"@site/docs/rtag/feature/types.md","sourceDirName":"rtag/feature","slug":"/rtag/feature/types","permalink":"/rtag/feature/types","draft":false,"unlisted":false,"editUrl":"https://github.com/saicone/rtag/blob/main/docs/default/feature/types.md","tags":[],"version":"current","lastUpdatedBy":"github-actions[bot]","lastUpdatedAt":1755643093000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Optional Types","description":"Information about OptionalType and it superclasses"},"sidebar":"rtag","previous":{"title":"Features","permalink":"/rtag/feature/"},"next":{"title":"Custom Objects","permalink":"/rtag/feature/custom-objects"}}');var o=t(4848),r=t(8453);const l={sidebar_position:1,title:"Optional Types",description:"Information about OptionalType and it superclasses"},s=void 0,a={},c=[{value:"Type check",id:"type-check",level:2},{value:"Conversion",id:"conversion",level:2},{value:"Single conversions",id:"single-conversions",level:3},{value:"Multiple conversions",id:"multiple-conversions",level:3},{value:"Custom conversions",id:"custom-conversions",level:3},{value:"Iterator",id:"iterator",level:2}];function d(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Rtag library provide the OptionalType class instance to allow flexible tag handling with different types of objects."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Create directly with any type of object\nOptionalType type = OptionalType.of("123");\n\n// --- Get from Rtag instance\nRtag rtag = ...;\nObject compount = ...;\nOptionalType type = rtag.getOptional(compound, "my", "object", "path");\n\n\n// --- Get from RtagEditor instance\nRtagEditor tag = ...;\nOptionalType type = tag.getOptional("my", "object", "path");\n'})}),"\n",(0,o.jsx)(n.h2,{id:"type-check",children:"Type check"}),"\n",(0,o.jsx)(n.p,{children:"Get the value of OptionalType as the type of data has you want or provide a default object."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"OptionalType type = ...;\n\n// Get as required object, this method assumes that you known the type of data\n// If the value isn't the required type will return null\nString string = type.value();\n// Specify the class (optional)\nString string = type.value(String.class);\n\n// Get as required object or return default provided object\nint num = type.or(-1); // default: -1\n// Specify the class (optional)\nint num = type.or(int.class, -1);\n"})}),"\n",(0,o.jsx)(n.h2,{id:"conversion",children:"Conversion"}),"\n",(0,o.jsxs)(n.p,{children:["Convert ",(0,o.jsx)(n.code,{children:"OptionalType"})," value into different types of objects, pretty useful if you don't known what type of data is it or simply require to parse any object, for example get a ",(0,o.jsx)(n.code,{children:"String"})," as ",(0,o.jsx)(n.code,{children:"Integer"})," providing a default value if the conversion fails."]}),"\n",(0,o.jsx)(n.h3,{id:"single-conversions",children:"Single conversions"}),"\n",(0,o.jsxs)(n.p,{children:["By default ",(0,o.jsx)(n.code,{children:"OptionalType"})," as the following single-object conversions to get the current value as:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Object"}),"\n",(0,o.jsxs)(n.li,{children:["String - Convert any non-null object to ",(0,o.jsx)(n.code,{children:"String"})]}),"\n",(0,o.jsxs)(n.li,{children:["Char - Extract the first char from any non-null object converted to ",(0,o.jsx)(n.code,{children:"String"})]}),"\n",(0,o.jsxs)(n.li,{children:["Boolean - Check if the non-null object as ",(0,o.jsx)(n.code,{children:"String"})," is ",(0,o.jsx)(n.code,{children:'"true"'})," or ",(0,o.jsx)(n.code,{children:'"false"'})," (",(0,o.jsx)(n.code,{children:'"1"'})," or ",(0,o.jsx)(n.code,{children:'"0"'})," | ",(0,o.jsx)(n.code,{children:'"yes"'})," or ",(0,o.jsx)(n.code,{children:'"no"'})," | ",(0,o.jsx)(n.code,{children:'"on"'})," or ",(0,o.jsx)(n.code,{children:'"off"'})," | ",(0,o.jsx)(n.code,{children:'"y"'})," or ",(0,o.jsx)(n.code,{children:'"n"'}),")"]}),"\n",(0,o.jsx)(n.li,{children:"Byte"}),"\n",(0,o.jsx)(n.li,{children:"Short"}),"\n",(0,o.jsx)(n.li,{children:"Integer (Int)"}),"\n",(0,o.jsx)(n.li,{children:"Float"}),"\n",(0,o.jsx)(n.li,{children:"Long"}),"\n",(0,o.jsx)(n.li,{children:"Double"}),"\n",(0,o.jsxs)(n.li,{children:["UUID - Parse ",(0,o.jsx)(n.code,{children:"String"})," or 4-length ",(0,o.jsx)(n.code,{children:"int[]"})," as ",(0,o.jsx)(n.code,{children:"UUID"})]}),"\n",(0,o.jsx)(n.li,{children:"Any type of serializable object - By using Gson"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"And only if the current value is a bit field:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Set<? extends Enum>"})," - Convert by providing Enum type class."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Set<E>"})," - Convert by providing element ordinal value by function."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Set<Integer>"})," - Convert by providing maximum ordinal value."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'OptionalType type = OptionalType.of("1");\n\n// Convert to normal objects\nString string = type.asString();\nint num = type.asInt(-1); // default: -1\nboolean bool = type.asBoolean(); // return true\n\n// Convert to serializable object like MyObject\nMyObject myObj = type.getAs(MyObject.class);\n'})}),"\n",(0,o.jsx)(n.admonition,{title:"Boolean compatibility",type:"info",children:(0,o.jsxs)(n.p,{children:["If the required conversion type is a ",(0,o.jsx)(n.code,{children:"Number"})," and the current value is a ",(0,o.jsx)(n.code,{children:"Boolean"}),", it will be parsed as ",(0,o.jsx)(n.code,{children:"1"})," for ",(0,o.jsx)(n.code,{children:"true"})," and ",(0,o.jsx)(n.code,{children:"0"})," for ",(0,o.jsx)(n.code,{children:"false"}),"."]})}),"\n",(0,o.jsx)(n.h3,{id:"multiple-conversions",children:"Multiple conversions"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"OptionalType"})," instance allows to convert any value into collective one, by iterating hover it and never return null value of required collection or array."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'OptionalType type = OptionalType.of(List.of("1", "value2", "2", "3", "3"));\n\n// Convert to any type of array (you should provide array sample)\n// Result: ["1", "value2", "2", "3", "3"]\nString[] array = type.asArray(new String[0], OptionalType::asString);\n\n// Convert to any type of list\n// Result: [1, 2, 3, 3]\nList<Short> list = type.asList(OptionalType::asShort);\n\n// Convert to any type of collection (you should provide collection to add values)\n// Result: [1, 2, 3]\nSet<Integer> set = type.asCollection(new HashSet(), OptionalType::asInt);\n'})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsx)(n.p,{children:'Take in count the multiple-type conversion doesn\'t do "magic" to convert types, it is limited to convert as provided function, and ignore any value that cannot be converted with the function.'})}),"\n",(0,o.jsxs)(n.admonition,{title:"Single type conversion",type:"tip",children:[(0,o.jsxs)(n.p,{children:["If you want the ",(0,o.jsx)(n.code,{children:"OptionalType"})," instance as single object just wrap it with ",(0,o.jsx)(n.code,{children:"OptionalType#single()"})," method, if the current type is a collection or array the first value will be used ",(0,o.jsx)(n.strong,{children:"recursively"}),"."]}),(0,o.jsxs)(n.p,{children:['For only "the first value" use the method ',(0,o.jsx)(n.code,{children:"OptionalType#first()"})," instead."]})]}),"\n",(0,o.jsx)(n.h3,{id:"custom-conversions",children:"Custom conversions"}),"\n",(0,o.jsx)(n.p,{children:"So you can implement your own conversion function with different types of methods."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"OptionalType type = ...;\n\n// Simple convert to MyObject\nMyObject myObj = type.by(value -> {\n\t// Conversion\n});\n"})}),"\n",(0,o.jsx)(n.p,{children:"Return default value if:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The current value is ",(0,o.jsx)(n.code,{children:"null"})]}),"\n",(0,o.jsx)(n.li,{children:"Conversion throws exception"}),"\n",(0,o.jsxs)(n.li,{children:["Conversion return ",(0,o.jsx)(n.code,{children:"null"})]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"MyObject def = ...;\nMyObject myObj = type.by(value -> {\n\t// Conversion\n}, def);\n"})}),"\n",(0,o.jsx)(n.p,{children:"Provide class to check if the current value is instance of required object and avoid conversion function."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"MyObject def = ...;\nMyObject myObj = type.by(MyObject.class, value -> {\n\t// Conversion\n}, def);\n"})}),"\n",(0,o.jsx)(n.h2,{id:"iterator",children:"Iterator"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"OptionalType"})," instance extends ",(0,o.jsx)(n.code,{children:"IterableType"})," that allow to iterate hover value type:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Array: Iterate hover array values"}),"\n",(0,o.jsx)(n.li,{children:"Collection: Iterate hover collection values"}),"\n",(0,o.jsx)(n.li,{children:"Single object: Iterate 1 time with the value."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"OptionalType type = ...;\n\nfor (Object o : type) {\n\t// Array|Collection values or simply the single object\n}\n\ntype.forEach(o -> {\n\t// Array|Collection values or simply the single object\n});\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>s});var i=t(6540);const o={},r=i.createContext(o);function l(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);