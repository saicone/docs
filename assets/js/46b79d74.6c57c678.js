"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6970],{2194:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>g,frontMatter:()=>i,metadata:()=>a,toc:()=>r});const a=JSON.parse('{"id":"rtag/advanced/tags","title":"Tag Objects","description":"Information about Rtag handling NBT","source":"@site/docs/rtag/advanced/tags.md","sourceDirName":"rtag/advanced","slug":"/rtag/advanced/tags","permalink":"/rtag/advanced/tags","draft":false,"unlisted":false,"editUrl":"https://github.com/saicone/rtag/blob/main/docs/default/advanced/tags.md","tags":[],"version":"current","lastUpdatedBy":"Rub\xe9n","lastUpdatedAt":1751601617000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Tag Objects","description":"Information about Rtag handling NBT"},"sidebar":"rtag","previous":{"title":"Explanation","permalink":"/rtag/advanced/explanation"},"next":{"title":"Minecraft Objects","permalink":"/rtag/advanced/minecraft"}}');var o=t(4848),s=t(8453);const i={sidebar_position:2,title:"Tag Objects",description:"Information about Rtag handling NBT"},c=void 0,d={},r=[{value:"TagBase",id:"tagbase",level:2},{value:"Create",id:"create",level:3},{value:"Get values",id:"get-values",level:3},{value:"TagList",id:"taglist",level:2},{value:"TagCompound",id:"tagcompound",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Here some utility classes to handle NBT objects using simple methods."}),"\n",(0,o.jsx)(n.h2,{id:"tagbase",children:"TagBase"}),"\n",(0,o.jsx)(n.p,{children:"It's tha main class to handle any type of NBT object."}),"\n",(0,o.jsx)(n.h3,{id:"create",children:"Create"}),"\n",(0,o.jsxs)(n.p,{children:["With ",(0,o.jsx)(n.code,{children:"TagBase"})," class you can create NBT objects with any type of (normal java) object, by default it only provide support to ",(0,o.jsx)(n.a,{href:"/rtag/intro#compatible-objects",children:"compatible objects"}),", ",(0,o.jsx)(n.code,{children:"Boolean"})," saved as ",(0,o.jsx)(n.code,{children:"Byte"})," and ",(0,o.jsx)(n.code,{children:"UUID"})," saved as ",(0,o.jsx)(n.code,{children:"String"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Not compatible with Map or List\nObject nbtObject = TagBase.newTag("Hello");\n\n// Compatible with Map, List, and any deserializable object using Gson\nRtagMirror mirror = ...;\nObject nbtObject = TagBase.newTag(mirror, Map.of("greeting", "Hello"));\n\n// Copy nbt object\nObject nbtCopy = TagBase.clone(nbtObject);\n'})}),"\n",(0,o.jsx)(n.h3,{id:"get-values",children:"Get values"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"TagBase"})," class provide different methods to get the java object value from any NBT object, ",(0,o.jsx)(n.code,{children:"Boolean"})," is get as ",(0,o.jsx)(n.code,{children:"Byte"})," and ",(0,o.jsx)(n.code,{children:"UUID"})," is get as ",(0,o.jsx)(n.code,{children:"String"})," or ",(0,o.jsx)(n.code,{children:"int[]"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"// NBT object\nObject nbtObject = ...;\n\n// Get type ID\nbyte type = TagBase.getTypeId(nbtObject);\n\n// Get value inside NBT, not compatible with Map or List\nObject value = TagBase.getValue(nbtObject);\n\n// Get value inside NBT, compatible with Map or List\n// but it only provide conversion to serializable objects\n// if the RtagMirror instance allows it.\nRtagMirror mirror = ...;\nObject value = TagBase.getValue(mirror, nbtObject);\n"})}),"\n",(0,o.jsx)(n.h2,{id:"taglist",children:"TagList"}),"\n",(0,o.jsxs)(n.p,{children:["It's a more specific class to handle ",(0,o.jsx)(n.code,{children:"NBTTagList"})," objects as java ",(0,o.jsx)(n.code,{children:"List<NBTBase>"}),", so it has the same methods mentioned on ",(0,o.jsx)(n.code,{children:"TagBase"})," but only for NBT lists."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Create NBTTagList object\nObject nbtList = TagList.newTag();\n\n// Add value\nTagList.add(nbtList, TagBase.newTag("Hello"));\n\n// Get size\nint size = TagList.size(nbtList);\n\n// Get from index\nObject nbtObject = TagList.get(nbtList, 0); // index: 0\n\n// Get the value inside NBTTagList, a List of NBTBase\nList<Object> value = TagList.getValue(nbtList);\n\n// Clear list\nTagList.clear(nbtList);\n'})}),"\n",(0,o.jsx)(n.h2,{id:"tagcompound",children:"TagCompound"}),"\n",(0,o.jsxs)(n.p,{children:["It's a more specific class to handle ",(0,o.jsx)(n.code,{children:"NBTTagCompound"})," objects as java ",(0,o.jsx)(n.code,{children:"Map<String, NBTBase>"}),", so it has the same methods mentioned on ",(0,o.jsx)(n.code,{children:"TagBase"})," but only for NBT compounds."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Create NBTTagCompound object\nObject nbtCompound = TagCompound.newTag();\n// Or create NBTTagCompound using SNBT (it\'s also compatible with Json)\nObject nbtCompound = TagCompound.newTag("{greeting:\\"Hello\\",someValue:123}");\n\n// Add value\nTagCompound.set(nbtCompound, "greeting", TagBase.newTag("Hello"));\n\n// Get size\nint size = TagCompound.getValue(nbtCompound).size();\n\n// Get from key\nObject nbtObject = TagCompound.get(nbtCompound, "greeting");\n\n// Get the value inside NBTTagCompound, a Map of NBTBase\nMap<String, Object> value = TagCompound.getValue(nbtCompound);\n\n// Get the NBTTagCompound as Json String\nString json = TagCompound.getJson(nbtCompound);\n\n// Clear compound\nTagCompound.clear(nbtCompound);\n'})})]})}function g(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var a=t(6540);const o={},s=a.createContext(o);function i(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);