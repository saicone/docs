"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5704],{5154:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>t,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"rtag/feature/types","title":"Objetos opcionales","description":"Informaci\xf3n sobre el OptionalType y sus classes principales","source":"@site/i18n/es/docusaurus-plugin-content-docs/current/rtag/feature/types.md","sourceDirName":"rtag/feature","slug":"/rtag/feature/types","permalink":"/es/rtag/feature/types","draft":false,"unlisted":false,"editUrl":"https://github.com/saicone/rtag/blob/main/docs/es/feature/types.md","tags":[],"version":"current","lastUpdatedBy":"github-actions[bot]","lastUpdatedAt":1755644860000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Objetos opcionales","description":"Informaci\xf3n sobre el OptionalType y sus classes principales"},"sidebar":"rtag","previous":{"title":"Caracter\xedsticas","permalink":"/es/rtag/feature/"},"next":{"title":"Objectos custom","permalink":"/es/rtag/feature/custom-objects"}}');var r=o(4848),l=o(8453);const t={sidebar_position:1,title:"Objetos opcionales",description:"Informaci\xf3n sobre el OptionalType y sus classes principales"},s=void 0,a={},c=[{value:"Revisi\xf3n de tipo",id:"revisi\xf3n-de-tipo",level:2},{value:"Conversi\xf3n",id:"conversi\xf3n",level:2},{value:"Conversi\xf3n \xfanica",id:"conversi\xf3n-\xfanica",level:3},{value:"Conversi\xf3n m\xfaltiple",id:"conversi\xf3n-m\xfaltiple",level:3},{value:"Conversi\xf3n custom",id:"conversi\xf3n-custom",level:3},{value:"Iterator",id:"iterator",level:2}];function d(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"La librer\xeda Rtag prove\xe9 el class OptionalType, cuya instancia permite manejar de manera flexible los tags mediante diferentes tipos de objetos."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Crear directamente con cualquier tipo de objeto\nOptionalType type = OptionalType.of("123");\n\n// --- Obtenerlo desde una instancia de Rtag\nRtag rtag = ...;\nObject compount = ...;\nOptionalType type = rtag.getOptional(compound, "my", "object", "path");\n\n\n// --- Obtenerlo desde una instancia de RtagEditor\nRtagEditor tag = ...;\nOptionalType type = tag.getOptional("my", "object", "path");\n'})}),"\n",(0,r.jsx)(n.h2,{id:"revisi\xf3n-de-tipo",children:"Revisi\xf3n de tipo"}),"\n",(0,r.jsx)(n.p,{children:"Obtener el valor del OptionalType como si fuera el tipo de dato que quieres o proveer un objeto por defecto."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"OptionalType type = ...;\n\n// Obtener como el objeto requerido, este m\xe9todo asume que sabes el tipo del dato\n// Si el valor no es del tipo que requieres, se devolver\xe1 null\nString string = type.value();\n// Especificar el class (opcional)\nString string = type.value(String.class);\n\n// Obtener como el objeto requerido o especificar un objeto por defecto\nint num = type.or(-1); // default: -1\n// Especificar el class (opcional)\nint num = type.or(int.class, -1);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"conversi\xf3n",children:"Conversi\xf3n"}),"\n",(0,r.jsxs)(n.p,{children:["Convertir el valor del ",(0,r.jsx)(n.code,{children:"OptionalType"})," en diferentes tipos de objetos, bastante \xfatil si no sabes el tipo de dato es o simplemente requieres convertir cualquier objeto, por ejemplo obtener un ",(0,r.jsx)(n.code,{children:"String"})," como si fuera un ",(0,r.jsx)(n.code,{children:"Integer"})," al proveer un valor por defecto en caso de fallar en la conversi\xf3n."]}),"\n",(0,r.jsx)(n.h3,{id:"conversi\xf3n-\xfanica",children:"Conversi\xf3n \xfanica"}),"\n",(0,r.jsxs)(n.p,{children:["Por defecto el ",(0,r.jsx)(n.code,{children:"OptionalType"})," tiene las siguientes conversiones de objetos \xfanicos para obtener el valor como:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Object"}),"\n",(0,r.jsxs)(n.li,{children:["String - Convertir cualquier objeto no nulo en ",(0,r.jsx)(n.code,{children:"String"})]}),"\n",(0,r.jsxs)(n.li,{children:["Char - Extraer el primer car\xe1cter de cualquier objeto no nulo convertido en ",(0,r.jsx)(n.code,{children:"String"})]}),"\n",(0,r.jsxs)(n.li,{children:["Boolean - Revisar si el objeto no nulo convertido en ",(0,r.jsx)(n.code,{children:"String"})," es ",(0,r.jsx)(n.code,{children:'"true"'})," o ",(0,r.jsx)(n.code,{children:'"false"'})," (",(0,r.jsx)(n.code,{children:'"1"'})," o ",(0,r.jsx)(n.code,{children:'"0"'})," | ",(0,r.jsx)(n.code,{children:'"yes"'})," o ",(0,r.jsx)(n.code,{children:'"no"'})," | ",(0,r.jsx)(n.code,{children:'"on"'})," o ",(0,r.jsx)(n.code,{children:'"off"'})," | ",(0,r.jsx)(n.code,{children:'"y"'})," o ",(0,r.jsx)(n.code,{children:'"n"'}),")"]}),"\n",(0,r.jsx)(n.li,{children:"Byte"}),"\n",(0,r.jsx)(n.li,{children:"Short"}),"\n",(0,r.jsx)(n.li,{children:"Integer (Int)"}),"\n",(0,r.jsx)(n.li,{children:"Float"}),"\n",(0,r.jsx)(n.li,{children:"Long"}),"\n",(0,r.jsx)(n.li,{children:"Double"}),"\n",(0,r.jsxs)(n.li,{children:["UUID - Convertir un ",(0,r.jsx)(n.code,{children:"String"})," o un ",(0,r.jsx)(n.code,{children:"int[]"})," de 4 valores como un ",(0,r.jsx)(n.code,{children:"UUID"})]}),"\n",(0,r.jsx)(n.li,{children:"Cualquier tipo de objeto serializable - Utilizando Gson"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Y solo si el valor es un bit field:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Set<? extends Enum>"})," - Convertir al proveer un class de Enum."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Set<E>"})," - Convertir al proveer los valores ordinales de un tipo de elemento mediante el uso de una funci\xf3n."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Set<Integer>"})," - Convertir al proveer el m\xe1ximo valor ordinal."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'OptionalType type = OptionalType.of("1");\n\n// Convertir en objetos normales\nString string = type.asString();\nint num = type.asInt(-1); // por defecto: -1\nboolean bool = type.asBoolean(); // devuelve true\n\n// Convertir en un objeto serializable como MyObject\nMyObject myObj = type.getAs(MyObject.class);\n'})}),"\n",(0,r.jsx)(n.admonition,{title:"Compatibilidad con Boolean",type:"info",children:(0,r.jsxs)(n.p,{children:["Si el tipo de dato requerido es una instancia de ",(0,r.jsx)(n.code,{children:"Number"})," y el valor actual es un ",(0,r.jsx)(n.code,{children:"Boolean"}),", ser\xe1 convertido en ",(0,r.jsx)(n.code,{children:"1"})," al ser ",(0,r.jsx)(n.code,{children:"true"})," y ",(0,r.jsx)(n.code,{children:"0"})," al ser ",(0,r.jsx)(n.code,{children:"false"}),"."]})}),"\n",(0,r.jsx)(n.h3,{id:"conversi\xf3n-m\xfaltiple",children:"Conversi\xf3n m\xfaltiple"}),"\n",(0,r.jsxs)(n.p,{children:["La instancia de ",(0,r.jsx)(n.code,{children:"OptionalType"}),' permite convertir cualquier tipo de valor en uno "coleccionable" (Collection o Array), al iterar sobre el y nunca devolver un valor nulo del tipo de colecci\xf3n o array requerido.']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'OptionalType type = OptionalType.of(List.of("1", "value2", "2", "3", "3"));\n\n// Convertir a cualquier tipo de array (debes proveer una muestra del array)\n// Resultado: ["1", "value2", "2", "3", "3"]\nString[] array = type.asArray(new String[0], OptionalType::asString);\n\n// Convertir en cualquier tipo de lista\n// Resultado: [1, 2, 3, 3]\nList<Short> list = type.asList(OptionalType::asShort);\n\n// Convertir en cualquier tipo de colecci\xf3n (debes proveer el Collection para agregarle los valores)\n// Resultado: [1, 2, 3]\nSet<Integer> set = type.asCollection(new HashSet(), OptionalType::asInt);\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsx)(n.p,{children:'Tomar en cuenta que la conversi\xf3n de m\xfaltiples objetos no hace "magia" para convertir los objetos, est\xe1 limitada a convertirlos seg\xfan la funci\xf3n proporcionada, y cualquier valor que no pueda ser convertido ser\xe1 ignorado.'})}),"\n",(0,r.jsxs)(n.admonition,{title:"Conversi\xf3n de objeto \xfanico",type:"tip",children:[(0,r.jsxs)(n.p,{children:["Si quieres que la instancia de ",(0,r.jsx)(n.code,{children:"OptionalType"})," sea un objeto \xfanico solamente utiliza el m\xe9todo ",(0,r.jsx)(n.code,{children:"OptionalType#single()"}),", si el tipo de objeto actual es una colecci\xf3n o array el primer valor ser\xe1 utilizado ",(0,r.jsx)(n.strong,{children:"de manera recursiva"}),"."]}),(0,r.jsxs)(n.p,{children:['Para tener solo "el primer valor" utiliza en cambio el m\xe9todo ',(0,r.jsx)(n.code,{children:"OptionalType#first()"}),"."]})]}),"\n",(0,r.jsx)(n.h3,{id:"conversi\xf3n-custom",children:"Conversi\xf3n custom"}),"\n",(0,r.jsx)(n.p,{children:"Adem\xe1s puedes implementar tu propia funci\xf3n de conversi\xf3n con diferentes tipos de m\xe9todos."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"OptionalType type = ...;\n\n// Convertir simplemente en MyObject\nMyObject myObj = type.by(value -> {\n\t// Conversi\xf3n\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:"Regresar un valor por defecto si:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["El valor actual es ",(0,r.jsx)(n.code,{children:"null"})]}),"\n",(0,r.jsx)(n.li,{children:"La conversi\xf3n produce una excepci\xf3n"}),"\n",(0,r.jsxs)(n.li,{children:["La conversi\xf3n devuelve ",(0,r.jsx)(n.code,{children:"null"})]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"MyObject def = ...;\nMyObject myObj = type.by(value -> {\n\t// Conversi\xf3n\n}, def);\n"})}),"\n",(0,r.jsx)(n.p,{children:"Proporcionar un class para revisar si el valor actual es una instancia del tipo de objeto requerido y de esta manera evitar la funci\xf3n de conversi\xf3n (por ser redundante)."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"MyObject def = ...;\nMyObject myObj = type.by(MyObject.class, value -> {\n\t// Conversi\xf3n\n}, def);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"iterator",children:"Iterator"}),"\n",(0,r.jsxs)(n.p,{children:["La instancia de ",(0,r.jsx)(n.code,{children:"OptionalType"})," se extiende del ",(0,r.jsx)(n.code,{children:"IterableType"}),", el cual permite iterar sobre el tipo de valor:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Array: Iterar sobre los valores del array"}),"\n",(0,r.jsx)(n.li,{children:"Colecci\xf3n: Iterar sobre los valores de la colecci\xf3n."}),"\n",(0,r.jsxs)(n.li,{children:["Objeto \xfanico: Iterar 1 vez sobre el \xfanico valor dentro del ",(0,r.jsx)(n.code,{children:"OptionalType"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"OptionalType type = ...;\n\nfor (Object o : type) {\n\t// Valores del Array|Collection o simplemente el objeto \xfanico\n}\n\ntype.forEach(o -> {\n\t// Valores del Array|Collection o simplemente el objeto \xfanico\n});\n"})})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>t,x:()=>s});var i=o(6540);const r={},l=i.createContext(r);function t(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);