"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5941],{4831:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"rtag/feature/custom-objects","title":"Objectos custom","description":"Como guardar y obtener objetos custom con Rtag","source":"@site/i18n/es/docusaurus-plugin-content-docs/current/rtag/feature/custom-objects.md","sourceDirName":"rtag/feature","slug":"/rtag/feature/custom-objects","permalink":"/es/rtag/feature/custom-objects","draft":false,"unlisted":false,"editUrl":"https://github.com/saicone/rtag/blob/main/docs/es/feature/custom-objects.md","tags":[],"version":"current","lastUpdatedBy":"Rub\xe9n","lastUpdatedAt":1751601617000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Objectos custom","description":"Como guardar y obtener objetos custom con Rtag"},"sidebar":"rtag","previous":{"title":"Objetos opcionales","permalink":"/es/rtag/feature/types"},"next":{"title":"Rutas funcionales","permalink":"/es/rtag/feature/functions"}}');var r=n(4848),o=n(8453);const s={sidebar_position:2,title:"Objectos custom",description:"Como guardar y obtener objetos custom con Rtag"},i=void 0,l={},c=[{value:"Serializador Gson",id:"serializador-gson",level:2},{value:"Registro en Rtag",id:"registro-en-rtag",level:2},{value:"Ejemplo",id:"ejemplo",level:3}];function u(e){const t={admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"Con Rtag puedes establecer objetos custom como NBT y obtenerlos seg\xfan el tipo de objeto requerido, dependiendo en tus necesdiades existen diferentes opciones para (de)serializar objetos."}),"\n",(0,r.jsx)(t.h2,{id:"serializador-gson",children:"Serializador Gson"}),"\n",(0,r.jsx)(t.p,{children:"Al usar la librer\xeda Gson dentro del c\xf3digo de Bukkit, es posible (de)serializar objetos mediante el siguiente proceso:"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Serializer (establecer)"}),": Objeto custom -> String en Json -> Map -> NBTTagCompound"]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Deserializer (obtener)"}),": NBTTagCompound -> Map -> String en Json -> Objeto custom"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'// Crear tu objeto custom\nMyObject myObj = ...;\n\n// --- Obtenerlo desde una instancia de Rtag\nRtag rtag = ...;\nObject compount = ...;\n// Establecer en "my -> object -> path"\nrtag.set(compound, myObj, "my", "object", "path");\n// Obtener desde "my <- object <- path"\nMyObject sameObj = rtag.getOptional(compount, "my", "object", "path").as(MyObject.class);\n\n\n// --- Obtenerlo desde una instancia de RtagEditor\nRtagEditor tag = ...;\n// Establecer en "my -> object -> path"\ntag.set(myObj, "my", "object", "path");\n// Obtener desde "my <- object <- path"\nMyObject sameObj = tag.getOptional("my", "object", "path").as(MyObject.class);\n'})}),"\n",(0,r.jsx)(t.h2,{id:"registro-en-rtag",children:"Registro en Rtag"}),"\n",(0,r.jsx)(t.p,{children:"Rtag por defecto solo tiene soporte con objetos normales de Java (String, Integer, List... etc), si quieres establecer y obtener objetos custom puedes registrar un (de)serializador en la instancia de Rtag."}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"RtagSerializer"}),": Instancia para convertir el objeto custom en un Map."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"RtagDeserializer"}),": Instancia para converir el Map en un objeto custom."]}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsx)(t.p,{children:"Esta conversi\xf3n establece un key adicional en el tag guardado para detectarlo usando el ID proporcionado."})}),"\n",(0,r.jsx)(t.h3,{id:"ejemplo",children:"Ejemplo"}),"\n",(0,r.jsxs)(t.p,{children:["Supongamos que tienes un objeto custom llamado ",(0,r.jsx)(t.code,{children:"CustomData"})," para guardar datos adicionales en tus items:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"package my.plugin;\n\npublic class CustomData {\n\n    private final String type;\n    private int level;\n    private boolean broken;\n\n    public CustomData(String type, int level, boolean broken) {\n        this.type = type;\n        this.level = level;\n        this.broken = broken;\n    }\n\n    public String getType() {\n        return type;\n    }\n\n    public int getLevel() {\n    \treturn level;\n    }\n\n    public boolean isBroken() {\n    \treturn broken;\n    }\n\n    public void setLevel(int level) {\n    \tthis.level = level;\n    }\n\n    public void setBroken(boolean broken) {\n    \tthis.broken = broken;\n    }\n\n    public boolean equals(Object object) {\n    \tif (object instanceof CustomData) {\n    \t\tCustomData data = (CustomData) object;\n    \t\treturn data.getType().equals(type) && data.getLevel == level && data.isBroken == broken;\n    \t}\n    \treturn false;\n    }\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:"Ahora debes crear un class que funcione como serializador y deserializador:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'package my.plugin;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class CustomDataSerializer implements RtagSerializer<CustomData>, RtagDeserializer<CustomData> {\n    \n    // ID usado para convertir el objeto custom en un Map\n    // CustomData -> Map\n    @Override\n    public String getInID() {\n        return "myplugin:CustomData";\n    }\n    \n    // ID usado para convertir un Map en un objeto custom\n    // Map -> CustomData\n    @Override\n    public String getOutID() {\n        return "myplugin:CustomData";\n    }\n\n    // Convertir el objeto de CustomData en un Map\n    @Override\n    public Map<String, Object> serialize(CustomData data) {\n        Map<String, Object> map = new HashMap();\n        map.put("type", data.getType());\n        map.put("level", data.getLevel());\n        map.put("broken", data.isBroken());\n        return map;\n    }\n    \n    // Convertir el Map en un objeto de CustomData\n    @Override\n    public CustomData deserialize(Map<String, Object> map) {\n        String type = map.get("type");\n        Integer level = map.get("level");\n        Boolean broken = map.get("broken");\n\n        if (type == null || level == null || broken == null) {\n        \treturn null;\n        } else {\n        \treturn new CustomData(type, level, broken);\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsxs)(t.p,{children:["Se sugiere usar un ID con el formado de ",(0,r.jsx)(t.code,{children:"<plugin>:<objeto>"})," para evitar incompatibilidad con otros plugins."]})}),"\n",(0,r.jsx)(t.p,{children:"Luego debes registrar el class en la instancia de Rtag que est\xe1s utilizando:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"Rtag rtag = ...;\nCustomDataSerializer serializer = new CustomDataSerializer();\n\nrtag.putSerializer(CustomData.class, serializer);\nrtag.putDeserializer(serializer);\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Ahora al utilizar la instancia de Rtag donde registraste el ",(0,r.jsx)(t.code,{children:"CustomDataSerializer"})," podr\xe1s guardar y almacenar el objeto de CustomData."]}),"\n",(0,r.jsxs)(t.p,{children:["En este ejemplo se usar\xe1 un RtagItem con la instancia de Rtag que tiene registrado el ",(0,r.jsx)(t.code,{children:"CustomDataSerializer"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'private final Rtag rtag = initRtag();\n\nprivate Rtag initRtag() {\n    Rtag rtag = new Rtag();\n    CustomDataConversion serializer = new CustomDataConversion();\n    rtag.putSerializer(CustomData.class, serializer);\n    rtag.putDeserializer(serializer);\n    return rtag;\n}\n\npublic void example(ItemStack item) {\n    RtagItem tag = new RtagItem(rtag, item);\n    \n    // -- Guardar data custom en el ItemStack\n    \n    // Data para el item\n    CustomData data = new CustomData("EPIC", 30, false);\n    // Establecer en la ruta "custom -> data"\n    tag.set(data, "custom", "data");\n    \n    // Los cambios ser\xe1n cargados en el item original\n    tag.load();\n    \n    \n    // -- Obtener la data custom desde un ItemStack\n    \n    // Obtener la data desde "custom" -> "data" sin una conversi\xf3n expl\xedcita\n    CustomData itemData = tag.get("custom", "data");\n    // Revisar si son iguales\n    System.out.println(data.equals(itemData));\n}\n'})})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var a=n(6540);const r={},o=a.createContext(r);function s(e){const t=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);